"""
Automatic configuration documentation generator for SAGA.

The ``generate_docs()`` function inspects the ``SagaSettings`` model and
produces a Markdown file that lists every configuration option, its type,
default value, and any description supplied via Pydantic ``Field`` metadata.

Running the module as a script (``python -m config.docs_generator``) will
overwrite ``docs/generated_configuration_schema.md`` with up‑to‑date
documentation.  Projects can add this script to their CI pipeline to
prevent drift between code and documentation.

Example usage from the command line::

    python -m config.docs_generator

The generated file has the following structure:

```
# Generated Configuration Schema

| Setting | Type | Default | Description |
|---------|------|---------|-------------|
| EMBEDDING_API_BASE | str | "http://127.0.0.1:11434" | Base URL for the embedding API service |
| ... |
```
"""

from __future__ import annotations

import os
from pathlib import Path
from typing import Any

from .settings import SagaSettings, settings as current_settings


def _format_default(value: Any) -> str:
    """Represent a default value as a readable string for markdown."""
    if isinstance(value, str):
        return f'"{value}"'
    if isinstance(value, (int, float, bool)):
        return str(value)
    if isinstance(value, (list, tuple, set)):
        return f"{list(value)}"
    # Fallback for other types
    return repr(value)


def generate_docs(output_path: str | os.PathLike = "docs/generated_configuration_schema.md") -> None:
    """
    Generate a Markdown file documenting all configuration fields.

    Parameters
    ----------
    output_path: str | Path
        Destination file for the generated documentation.  Parent directories
        are created automatically.
    """
    # Ensure the output directory exists
    out_file = Path(output_path)
    out_file.parent.mkdir(parents=True, exist_ok=True)

    lines = [
        "# Generated Configuration Schema",
        "",
        "This file is automatically generated from the ``SagaSettings`` model "
        "and should be kept in sync with the source code.  It is intended for "
        "human readers and can be referenced by the project documentation.",
        "",
        "| Setting | Type | Default | Description |",
        "|---------|------|---------|-------------|",
    ]

    # Iterate over the model fields in definition order
    for field_name, field_info in SagaSettings.model_fields.items():
        field_type = field_info.annotation
        type_str = getattr(field_type, "__name__", str(field_type))

        default_val = getattr(current_settings, field_name, None)
        default_str = _format_default(default_val)

        description = field_info.description.replace("\n", " ").strip() if field_info.description else ""

        description = description.replace("|", "\\|")

        lines.append(f"| {field_name} | {type_str} | {default_str} | {description} |")

    # Write the file
    out_file.write_text("\n".join(lines), encoding="utf-8")


if __name__ == "__main__":
    generate_docs()
