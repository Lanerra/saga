# Relationship Constraint Configuration for SAGA Knowledge Graph
# This file defines validation rules and behaviors for the constraint system

# Global constraint settings
global_settings:
  enable_constraints: true
  strict_mode: false  # If true, reject invalid relationships; if false, use fallbacks
  min_confidence_threshold: 0.3  # Minimum confidence to accept a relationship
  auto_correction_enabled: true  # Allow automatic relationship type corrections
  log_violations: true  # Log constraint violations for analysis

# Node type aliases and mappings
node_type_mappings:
  # Map common variations to canonical node types
  Person: Character
  People: Character  
  Individual: Character
  NPC: Character
  Protagonist: Character
  
  Object: WorldElement
  Item: WorldElement
  Tool: WorldElement
  Weapon: WorldElement
  Artifact: WorldElement
  
  Place: Location
  Area: Location
  Region: Location
  Building: Location
  Structure: Location
  
  Organization: Faction
  Group: Faction
  Guild: Faction
  Kingdom: Faction
  Empire: Faction
  
  Magic: System
  Technology: System
  MagicSystem: System
  
  Story: Lore
  History: Lore
  Legend: Lore
  Myth: Lore
  
  Quality: Trait
  Attribute: Trait
  Property: Trait
  Characteristic: Trait

# Relationship type confidence adjustments
relationship_confidence_modifiers:
  # High confidence relationships (very clear semantics)
  FAMILY_OF: 1.0
  LOVES: 1.0
  HATES: 1.0
  OWNS: 1.0
  LOCATED_IN: 1.0
  CREATED_BY: 1.0
  
  # Medium confidence (some ambiguity possible)
  KNOWS: 0.8
  RELATES_TO: 0.3  # Generic fallback - low confidence
  CONNECTED_TO: 0.7
  ASSOCIATED_WITH: 0.5
  
  # Low confidence (often vague or context-dependent)
  HAS: 0.6  # Could mean ownership, traits, or other relationships
  IS: 0.5   # Very generic, often needs context
  WITH: 0.4 # Extremely vague

# Story genre specific adjustments
genre_specific_rules:
  fantasy:
    # In fantasy, magical relationships are more common
    additional_valid_relationships:
      - ENCHANTED_BY
      - CURSED_BY
      - BLESSED_BY
    
    # Allow characters to have relationships with abstract magical concepts
    character_abstract_relationships: true
    
  science_fiction:
    # In sci-fi, technology relationships are common
    additional_valid_relationships:
      - ENHANCED_BY
      - POWERED_BY
      - PROGRAMMED_BY
    
    # Allow more flexible relationships with systems/technology
    character_system_relationships: true
  
  historical:
    # Historical fiction emphasizes social hierarchies
    social_hierarchy_strict: true
    
    # More emphasis on geographical and political relationships
    location_political_relationships: true

# Custom validation rules for specific domains
custom_validation_rules:
  # Anti-slavery rule - no sentient beings can own other sentient beings
  no_sentient_ownership:
    enabled: true
    relationships: [OWNS, POSSESSES, CONTROLS]
    rule: "subject:sentient AND object:sentient -> FORBIDDEN"
    message: "Sentient beings cannot own other sentient beings"
    suggested_alternatives: [LEADS, COMMANDS, INFLUENCES]
  
  # Emotional consistency - only conscious entities can have emotions
  emotional_consistency:
    enabled: true
    relationships: [LOVES, HATES, FEARS, RESPECTS, ENVIES, PITIES]
    rule: "subject:NOT_conscious -> FORBIDDEN"
    message: "Only conscious entities can have emotional relationships"
    suggested_alternatives: [RELATES_TO, CONNECTED_TO]
  
  # Physical presence requirement for spatial relationships
  spatial_presence:
    enabled: true
    relationships: [LOCATED_IN, LOCATED_AT, NEAR, ADJACENT_TO, CONTAINS]
    rule: "subject:NOT_physical OR object:NOT_physical -> FORBIDDEN"
    message: "Spatial relationships require physical presence"
    suggested_alternatives: [ASSOCIATED_WITH, RELATES_TO]
  
  # Cognitive requirement for mental relationships
  cognitive_requirement:
    enabled: true
    relationships: [BELIEVES, REALIZES, REMEMBERS, UNDERSTANDS, THINKS_ABOUT]
    rule: "subject:NOT_conscious -> FORBIDDEN" 
    message: "Cognitive relationships require conscious subjects"
    suggested_alternatives: [RELATES_TO, SYMBOLIZES]

# Fallback strategies when relationships are invalid
fallback_strategies:
  # Primary fallback - use RELATES_TO for most invalid relationships
  primary_fallback:
    relationship: RELATES_TO
    confidence: 0.3
    conditions: "always"
  
  # Spatial fallback - for invalid spatial relationships
  spatial_fallback:
    relationship: NEAR
    confidence: 0.4
    conditions: "original_relationship IN [LOCATED_IN, LOCATED_AT, ADJACENT_TO] AND both_physical"
  
  # Social fallback - for invalid social relationships  
  social_fallback:
    relationship: KNOWS
    confidence: 0.5
    conditions: "original_relationship IN [FAMILY_OF, FRIEND_OF, ENEMY_OF] AND both_sentient"
  
  # Ownership fallback
  ownership_fallback:
    relationship: ASSOCIATED_WITH
    confidence: 0.4
    conditions: "original_relationship IN [OWNS, POSSESSES] AND invalid_ownership"

# Relationship priority for disambiguation
relationship_priority_order:
  # When multiple relationships could be valid, prefer in this order:
  - FAMILY_OF      # Family relationships are very specific
  - ROMANTIC_WITH  # Romance is quite specific
  - OWNS           # Ownership is usually clear
  - LOCATED_IN     # Spatial containment is specific
  - CREATED_BY     # Creation relationships are definitive
  - LEADS          # Leadership is fairly specific
  - MEMBER_OF      # Membership is clear
  - FRIEND_OF      # Friendship is more specific than general knowing
  - ENEMY_OF       # Enmity is more specific than general knowing
  - KNOWS          # General acquaintance
  - NEAR           # Spatial proximity
  - RELATES_TO     # Most generic - use as last resort

# Validation bypass rules (when to skip constraint validation)
validation_bypass:
  # Skip validation for these relationship types (they're pre-validated)
  skip_for_relationships:
    - STRUCTURAL_NEXT  # System-generated structural relationships
    - SYSTEM_INTERNAL  # Internal system relationships
    - DEBUG_RELATION   # Debugging relationships
  
  # Skip validation for these node type combinations (too complex to validate)
  skip_for_node_combinations:
    - [ValueNode, ValueNode]  # Literal-to-literal relationships
  
  # Skip validation based on relationship properties
  skip_for_properties:
    system_generated: true  # Skip relationships marked as system-generated
    bypass_validation: true # Explicit bypass flag

# Monitoring and reporting settings
monitoring:
  # Track these metrics
  track_validation_rate: true
  track_correction_rate: true
  track_rejection_rate: true
  track_fallback_usage: true
  
  # Report configuration
  report_frequency: daily  # How often to generate constraint violation reports
  report_format: json     # Format for violation reports
  
  # Alert thresholds
  alert_on_high_rejection_rate: 0.20    # Alert if >20% of relationships are rejected
  alert_on_low_confidence_rate: 0.50    # Alert if >50% of relationships are low confidence
  
# Development and testing settings
development:
  # Enable additional logging for debugging
  debug_logging: false
  
  # Validation trace - log detailed validation steps
  enable_validation_trace: false
  
  # Test mode settings
  test_mode: false
  test_allow_invalid: false  # In test mode, allow invalid relationships for testing