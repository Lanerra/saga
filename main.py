# main.py
"""
Main execution script for the Saga Novel Generation system.
Initializes logging, creates the NovelWriterAgent, ensures necessary
setup (plot outline, world-building), and runs the chapter generation loop.
"""

import logging
import sys
import os # Needed for file handler path
import random # For unhinged mode selection

# Import necessary components from other modules
from novel_logic import NovelWriterAgent
import config # To setup logging and access defaults/constants

def setup_logging():
    """Configures logging based on settings in config.py"""
    log_level_name = config.LOG_LEVEL.upper()
    log_level = getattr(logging, log_level_name, logging.INFO) 

    logging.basicConfig(
        level=log_level,
        format=config.LOG_FORMAT,
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    if config.LOG_FILE:
        try:
            log_dir = os.path.dirname(config.LOG_FILE)
            if log_dir: 
                 os.makedirs(log_dir, exist_ok=True)
            file_handler = logging.FileHandler(config.LOG_FILE, mode='a', encoding='utf-8')
            file_handler.setLevel(log_level)
            formatter = logging.Formatter(config.LOG_FORMAT, datefmt='%Y-%m-%d %H:%M:%S')
            file_handler.setFormatter(formatter)
            logging.getLogger().addHandler(file_handler)
            logging.info(f"File logging enabled. Log file: {config.LOG_FILE}")
        except Exception as e:
            logging.error(f"Failed to configure file logging to {config.LOG_FILE}: {e}", exc_info=True)
            print(f"Warning: Could not set up log file at '{config.LOG_FILE}'. Error: {e}", file=sys.stderr)
    logging.info(f"Logging setup complete. Level: {log_level_name}")

def run_novel_generation():
    """
    Main function to initialize the agent and orchestrate the novel writing process.
    """
    setup_logging()
    logger = logging.getLogger(__name__)
    logger.info("--- Starting Saga Novel Generation ---")

    try:
        agent = NovelWriterAgent()
        logger.info("NovelWriterAgent initialized successfully.")
    except Exception as e:
        logger.critical(f"Failed to initialize NovelWriterAgent: {e}", exc_info=True)
        print(f"\nFATAL: Could not initialize the agent. Check logs. Error: {e}", file=sys.stderr)
        sys.exit(1)

    logger.info("Checking for existing plot outline...")
    is_default_outline = agent.plot_outline.get("is_default", True) or \
                         not agent.plot_outline.get("title") or \
                         not agent.plot_outline.get("protagonist_name") or \
                         len(agent.plot_outline.get("plot_points", [])) < 5

    if is_default_outline:
        print("\n--- Generating New Plot Outline ---")
        logger.info("No valid plot outline found or outline appears default. Generating new one.")
        
        generation_params = {}
        if config.UNHINGED_PLOT_MODE:
            logger.info("Unhinged plot mode ENABLED. Randomizing core elements.")
            print("--- UNHINGED PLOT MODE: Generating randomized core elements ---")
            generation_params["genre"] = random.choice(config.UNHINGED_GENRES)
            generation_params["theme"] = random.choice(config.UNHINGED_THEMES)
            generation_params["setting_archetype"] = random.choice(config.UNHINGED_SETTINGS_ARCHETYPES)
            generation_params["protagonist_archetype"] = random.choice(config.UNHINGED_PROTAGONIST_ARCHETYPES)
            generation_params["conflict_archetype"] = random.choice(config.UNHINGED_CONFLICT_TYPES)
            logger.info(f"Randomized elements for unhinged mode: {generation_params}")
        else:
            logger.info("Standard plot mode. Using configured genre, theme, setting.")
            generation_params["genre"] = config.CONFIGURED_GENRE
            generation_params["theme"] = config.CONFIGURED_THEME
            generation_params["setting_description"] = config.CONFIGURED_SETTING_DESCRIPTION
            # Protagonist description and conflict will be generated by LLM based on these.

        try:
            outline = agent.generate_plot_outline(
                default_protagonist_name=config.DEFAULT_PROTAGONIST_NAME,
                unhinged_mode=config.UNHINGED_PLOT_MODE,
                **generation_params # Pass either randomized or configured elements
            )
            print(f"Generated Outline for: '{outline.get('title', 'N/A')}' (Protagonist: {outline.get('protagonist_name', 'N/A')})")
            print(f"Genre: {outline.get('genre', 'N/A')}, Theme: {outline.get('theme', 'N/A')}")
            logger.info(f"Generated plot outline titled: '{outline.get('title', 'N/A')}'")
        except Exception as e:
            logger.critical(f"Critical error during plot outline generation: {e}", exc_info=True)
            print(f"\nFATAL: Error generating plot outline: {e}. Cannot continue.", file=sys.stderr)
            sys.exit(1)
    else:
        print("\n--- Using Existing Plot Outline ---")
        print(f"Loaded outline for: '{agent.plot_outline.get('title', 'N/A')}' (Protagonist: {agent.plot_outline.get('protagonist_name', 'N/A')})")
        logger.info(f"Using existing plot outline: '{agent.plot_outline.get('title', 'N/A')}'")

    logger.info("Checking for existing world-building data...")
    is_default_world = agent.world_building.get("is_default", True) or \
                       (len(agent.world_building.keys()) <= 3 and "Default Location" in agent.world_building.get("locations", {}))

    if is_default_world:
        print("\n--- Generating Initial World-Building Data ---")
        logger.info("World-building data appears default or missing. Generating initial data based on plot outline.")
        try:
            agent.generate_world_building()
            print("Generated/Refreshed initial world-building data.")
            logger.info("Initial world-building data generation complete.")
        except Exception as e:
            logger.error(f"Error generating world building: {e}", exc_info=True)
            print(f"\nWarning: Error generating world building: {e}. Proceeding with potentially default data.")
    else:
        print("\n--- Using Existing World-Building Data ---")
        logger.info("Using existing world-building data.")

    print("\n--- Starting Novel Writing Process ---")
    start_chapter = agent.chapter_count + 1
    end_chapter = start_chapter + config.CHAPTERS_PER_RUN

    print(f"Current Chapter Count (from DB): {agent.chapter_count}")
    if config.CHAPTERS_PER_RUN > 0:
        print(f"Targeting Chapters: {start_chapter} to {end_chapter - 1} in this run.")
        logger.info(f"Starting chapter writing loop from {start_chapter} to {end_chapter - 1}.")
    else:
        print("CHAPTERS_PER_RUN is set to 0 in config. No chapters will be written.")
        logger.info("CHAPTERS_PER_RUN is 0, skipping chapter writing loop.")

    for i in range(start_chapter, end_chapter):
        print(f"\n--- Attempting Chapter {i} ---")
        logger.info(f"--- Starting Generation for Chapter {i} ---")
        try:
            chapter_text = agent.write_chapter(i)
            if chapter_text:
                print(f"Chapter {i}: Successfully generated and saved (Length: {len(chapter_text)} chars).")
                snippet = ' '.join(chapter_text[:250].splitlines()).strip()
                print(f"Chapter {i} Snippet: {snippet}...")
                logger.info(f"--- Successfully completed Chapter {i} ---")
            else:
                print(f"Chapter {i}: Failed to generate or save. Check logs for details.")
                logger.error(f"Chapter {i} generation failed. See previous log messages for reasons.")
        except Exception as e:
            logger.critical(f"Critical error during chapter {i} writing process: {e}", exc_info=True)
            print(f"\n!!! Critical Error during chapter {i} writing: {e} !!! Halting generation.", file=sys.stderr)
            break 

    print(f"\n--- Novel writing process finished for this run ---")
    print(f"Final Agent Chapter Count (in DB): {agent.chapter_count}")
    print(f"Check the '{config.OUTPUT_DIR}' directory for JSON state files, chapter text files, logs, and the database ('{os.path.basename(config.DATABASE_FILE)}').")
    logger.info(f"--- Saga Novel Generation Run Finished. Final chapter count: {agent.chapter_count} ---")

if __name__ == "__main__":
    run_novel_generation()